#!/usr/bin/env bash
### sai-lpc -- command-line Sai liquidity pool client
### Usage: sai-lpc [<options>] <command> [<args>]
###    or: sai-lpc <command> --help
###
### Sai-lpc is a simple dumb liquidity pool created for Sai.
###
### TODO In this model there is one type of underlying collateral (called gems).
### TODO The SKR token represents claims on the system's excess gems, and is the
### TODO only admissible type of collateral.  Gems can be converted to/from SKR.
###
### TODO Any transfers of sai or SKR are done using the normal ERC20 interface;
### TODO until settlement mode is triggered, sai users should only need ERC20.
###
### To conveniently perform ERC20 transfers, see the token(1) program
### available at <https://github.com/dapphub/token>.
###
### Sai-lpc options:
###
###        --lpc=<address>        address of lpc to perform operation on
###
### Transaction options:
###
###    -F, --from=<account>       account from which to send transaction
###    -G, --gas=<number>         amount of gas to provide with transaction

OPTS="sai-lpc [<options>] <command> [<args>]
sai-lpc <command> --help
--
  Options
lpc=address          address of lpc to perform operation on
F,from=address       account from which to send transaction
G,gas=number         amount of gas to provide with transaction
h                    display output in human-readable form
"

set -e

if [[ $2 = --help ]]; then
  exec "${0##*/}" help -- "$1"
elif [[ $1 = -* ]] && which "${0##*/}-$1" &>/dev/null; then
  exec "${0##*/}-$1" "${@:2}"
fi

eval "$(git rev-parse --parseopt -- "$@" <<<"$OPTS" || echo exit $?)"

while [[ $1 ]]; do
  case $1 in
    --)              shift; break;;

       --lpc)        shift; export SAI_LPC=$1;;
    
    -F|--from)       shift; export ETH_FROM=$1;;
    -G|--gas)        shift; export ETH_GAS=$1;;
    
    -h)                     export SAI_HUMAN=1;;

    *) printf "${0##*/}: internal error: %q\n" "$1"; exit 1
  esac; shift
done

export SAI_LPC=${SAI_LPC:-@sai_lpc}

"${0##*/}-${1-help}" "${@:2}"
